{"version":3,"sources":["Components/SearchBox.js","Components/Card.js","Components/CardList.js","Components/Scroll.js","Containers/App.js","reportWebVitals.js","index.js"],"names":["SearchBox","params","listen","className","placeholder","type","onChange","Card","id","name","email","src","alt","CardList","CardArray","robots","map","items","i","Scroll","probs","style","overflowY","border","height","children","App","onSearchListener","event","setState","searchField","target","value","state","console","log","fetch","then","response","json","data","this","filteredRobots","filter","robot","toLocaleLowerCase","includes","length","Fragment","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PAgBeA,MAhBf,SAAmBC,GAAS,IAClBC,EAAWD,EAAXC,OACR,OAEE,qBAAKC,UAAU,KAAf,SACE,uBACEA,UAAU,mCACVC,YAAY,SACZC,KAAK,SACLC,SAAUJ,O,MCGHK,MAZf,YAAoC,IAApBC,EAAmB,EAAnBA,GAAIC,EAAe,EAAfA,KAAMC,EAAS,EAATA,MACtB,OACI,sBAAKP,UAAU,sDAAf,UACI,qBAAKQ,IAAG,+BAA0BH,EAA1B,iBAA6CI,IAAKH,IAC1D,sBAAKN,UAAU,KAAf,UACI,6BAAKM,IACL,4BAAIC,WCaLG,EAjBE,SAAC,GAAgB,IACxBC,EADuB,EAAbC,OACSC,KAAI,SAACC,EAAOC,GACjC,OAAO,cAAC,EAAD,CAEHV,GAAIS,EAAMT,GACVC,KAAMQ,EAAMR,KACZC,MAAOO,EAAMP,OAHRQ,MAMb,OACI,qBAAKf,UAAU,KAAf,SACKW,KCJEK,MATf,SAAgBC,GAEZ,OACI,qBAAKC,MAAO,CAACC,UAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,SAApE,SACKJ,EAAMK,YC2DJC,E,kDArDb,aAAe,IAAD,8BACZ,gBASFC,iBAAmB,SAACC,GAKlB,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAX1C,EAAKC,MAAQ,CACXlB,OAAQ,GACRe,YAAa,IANH,E,gEAoBO,IAAD,OAClBI,QAAQC,IAAI,WAGZC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKX,SAAS,CAAEd,OAAQyB,S,+BAGjC,MAEyBC,KAAKR,MAA7BlB,EAFD,EAECA,OAAQe,EAFT,EAESA,YAEVY,EAAiB3B,EAAO4B,QAAO,SAAAC,GACnC,OAAOA,EAAMnC,KAAKoC,oBAAoBC,SAAShB,EAAYe,wBAE7D,OAAK9B,EAAOgC,OAKR,eAAC,IAAMC,SAAP,WACE,oBAAI7C,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWD,OAAQuC,KAAKd,mBACxB,cAAC,EAAD,UACE,cAAC,EAAD,CAAUZ,OAAQ2B,SARjB,6C,GAvCKO,IAAMC,WCITC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.55fb62ea.chunk.js","sourcesContent":["function SearchBox(params) {\r\n  const { listen } = params;\r\n  return (\r\n\r\n    <div className=\"tc\">\r\n      <input\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        placeholder=\"Search\"\r\n        type=\"search\"\r\n        onChange={listen}\r\n\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;\r\n","function Card({ id, name, email }) {\r\n    return (\r\n        <div className=\"rc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img src={`https://robohash.org/${id}?size=200x200`} alt={name} />\r\n            <div className=\"tc\">\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    const CardArray = robots.map((items, i) => {\r\n        return <Card\r\n            key={i}\r\n            id={items.id}\r\n            name={items.name}\r\n            email={items.email} />\r\n    })\r\n\r\n    return (\r\n        <div className=\"tc\">\r\n            {CardArray}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default CardList;","function Scroll(probs) {\r\n\r\n    return (\r\n        <div style={{overflowY:'scroll', border: '5px solid black', height: '800px'}}>\r\n            {probs.children}\r\n        </div>// Will return its children as shown in App.js\r\n    )\r\n\r\n}\r\nexport default Scroll;","import React from 'react'\r\nimport './App.css';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport 'tachyons'\r\nimport CardList from '../Components/CardList';\r\nimport '../index'\r\nimport Scroll from '../Components/Scroll';\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    /* State of the App */\r\n    this.state = {\r\n      robots: [],\r\n      searchField: \"\"\r\n    }\r\n  }\r\n\r\n  onSearchListener = (event) => {\r\n    /*state.searchField = event.target.value; DO NOT DO THIS, its gonna requre re-render,\r\n     instead, use this.setState({var:val}) to handle te re-rendering.\r\n     Also, use arrow function instead, because the \"this\" will be in the searchBox not in the App if\r\n     normal function is used.*/\r\n    this.setState({ searchField: event.target.value })\r\n  }\r\n\r\n  /* This function is explained in React component documentation.\r\n  This function runs before render() function. */\r\n  componentDidMount() {\r\n    console.log(\"mounted\");\r\n\r\n    /* Getting JSON data and turn it into Javascript Object */\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response => response.json())\r\n      .then(data => this.setState({ robots: data }));\r\n  }\r\n\r\n  render() {\r\n    /* Filtering the robots object array for name searching */\r\n    const { robots, searchField } = this.state; // To not typing this.state.robots again\r\n\r\n    const filteredRobots = robots.filter(robot => {\r\n      return robot.name.toLocaleLowerCase().includes(searchField.toLocaleLowerCase());\r\n    })\r\n    if (!robots.length) {\r\n      return <h1>Loading</h1>\r\n    }\r\n    else {\r\n      return (\r\n        <React.Fragment>\r\n          <h1 className=\"tc\">ROBOFRIENDS</h1>\r\n          <SearchBox listen={this.onSearchListener} />\r\n          <Scroll>\r\n            <CardList robots={filteredRobots} />\r\n          </Scroll>\r\n        </React.Fragment>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './Containers/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}